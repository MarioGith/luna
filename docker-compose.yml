services:
  # PostgreSQL Database with pgvector
  postgres:
    image: pgvector/pgvector:pg15
    container_name: audio-transcription-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: audio_transcription
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - audio-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: audio-transcription-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/audio_transcription?schema=public
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - UPLOAD_DIR=/app/uploads
      - MAX_FILE_SIZE=10485760
    volumes:
      - ./uploads:/app/uploads
      - ./prisma:/app/prisma
    ports:
      - "3000:3000"
    networks:
      - audio-network
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        sleep 10 &&
        echo 'Generating Prisma client...' &&
        npx prisma generate &&
        echo 'Running database migrations...' &&
        npx prisma migrate deploy &&
        echo 'Creating uploads directory...' &&
        mkdir -p /app/uploads &&
        echo 'Starting Next.js server...' &&
        node server.js
      "

  # Development service (optional)
  dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: audio-transcription-dev
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/audio_transcription?schema=public
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - UPLOAD_DIR=/app/uploads
      - MAX_FILE_SIZE=10485760
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3001:3000"
    networks:
      - audio-network
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        sleep 10 &&
        npx prisma generate &&
        npx prisma migrate dev --name init &&
        mkdir -p /app/uploads &&
        npm run dev
      "
    profiles:
      - dev

volumes:
  postgres_data:

networks:
  audio-network:
    driver: bridge
